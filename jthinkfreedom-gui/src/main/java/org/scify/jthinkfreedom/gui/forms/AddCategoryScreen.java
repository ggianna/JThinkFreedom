/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.scify.jthinkfreedom.gui.forms;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.ListSelectionModel.SINGLE_SELECTION;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.scify.jthinkfreedom.reactors.TileXmlParser;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author xrousakis
 */
public class AddCategoryScreen extends javax.swing.JFrame {

    private boolean reWrite;
    private int rowsValue;
    private int columnsValue;
    private String imageName;
    private String folder;
    private String selectedCategory;
    private DefaultListModel categoriesDlm;
    private Map<String, String> peckingOrder;
    private Document configFile;
    private String xml = System.getProperty("user.dir") + "/categories.xml";

    /**
     * Creates new form XmlScreen
     */
    public AddCategoryScreen() {
        categoriesDlm = new DefaultListModel();
        initComponents();
        TileXmlParser parser = new TileXmlParser();
        peckingOrder = parser.getHierarchy();
        fillCategoriesDlm();
        categoriesList.setSelectionMode(SINGLE_SELECTION);
        reWrite = false;
    }

    public AddCategoryScreen(String foo) {

    }

    private void fillCategoriesDlm() {
        for (Map.Entry<String, String> entry : peckingOrder.entrySet()) {
            categoriesDlm.addElement(entry.getKey());
        }
        categoriesDlm.addElement("None");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        categoryField = new javax.swing.JTextField();
        categoryLabel = new javax.swing.JLabel();
        imageButton = new javax.swing.JButton();
        folderLabel = new javax.swing.JLabel();
        folderButton = new javax.swing.JButton();
        columnsSpinner = new javax.swing.JSpinner();
        rowsSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoriesList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        imageField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        jLabel1.setText("Add Category");

        nameLabel.setText("Category Name");

        categoryLabel.setText("Category image");

        imageButton.setText("Choose image");
        imageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageButtonActionPerformed(evt);
            }
        });

        folderLabel.setText("Category Folder");

        folderButton.setText("Choose Folder");
        folderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folderButtonActionPerformed(evt);
            }
        });

        columnsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));

        rowsSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 4, 1));

        jLabel2.setText("Rows");

        jLabel3.setText("Columns");

        addButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        categoriesList.setModel(categoriesDlm);
        categoriesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoriesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(categoriesList);

        jLabel4.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel4.setText("Dimensions");

        jLabel5.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        jLabel5.setText("Belongs to Category");

        jLabel6.setText("Category image text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryLabel)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imageButton)
                            .addComponent(folderButton)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(addButton)
                                .addGap(18, 18, 18)
                                .addComponent(cancelButton))
                            .addComponent(imageField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(folderLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(nameLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(rowsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(columnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {categoryField, folderButton, imageButton, imageField});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, cancelButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLabel)
                            .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(folderLabel)
                            .addComponent(folderButton))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryLabel)
                            .addComponent(imageButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(imageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(columnsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rowsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(cancelButton))
                        .addGap(61, 61, 61))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {categoryField, imageButton, imageField});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private Border createBorder(Color color) {
        Border border = BorderFactory.createLineBorder(color, 2);
        return border;
    }

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String text = categoryField.getText().toString();
        String textOfImage = imageField.getText().toString();
        if (imageName == null) {
            JOptionPane.showMessageDialog(this, "you did not select an image");
        } else {
            if (text.equals("")) {
                categoryField.setBorder(createBorder(Color.RED));
            } else {
                categoryField.setBorder(null);
                rowsValue = (Integer) rowsSpinner.getValue();
                columnsValue = (Integer) columnsSpinner.getValue();
                storeToXml(text, textOfImage);
                /*if (reWrite == false) {
                 addToXml(text);
                 } else {
                 reWriteXml(text);
                 }*/
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void storeToXml(String categoryName, String imageText) {
        System.out.println(selectedCategory);
        try {
            configFile = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(xml));
            configFile.normalize();
        } catch (Exception ex) {
            ex.printStackTrace(System.err);
        }
        //all the categories
        NodeList categories = configFile.getElementsByTagName("category");

        // createing tags to store to the xml
        Element category = configFile.createElement("category");
        Element rows = configFile.createElement("rows");
        Element columns = configFile.createElement("columns");
        Element folder = configFile.createElement("folder");
        Element filename = configFile.createElement("filename");
        Element text = configFile.createElement("text");

        /*append information to the tags*/
        //filename.appendChild(configFile.createTextNode(imageName));
        category.setAttribute("name", categoryName);
        category.setAttribute("resource", "no");

        rows.appendChild(configFile.createTextNode(Integer.toString(rowsValue)));
        columns.appendChild(configFile.createTextNode(Integer.toString(columnsValue)));

        folder.appendChild(configFile.createTextNode(this.folder));
        filename.appendChild(configFile.createTextNode(imageName));
        text.appendChild(configFile.createTextNode(imageText));

        /*append tags to the category*/
        category.appendChild(rows);
        category.appendChild(columns);
        category.appendChild(folder);
        category.appendChild(filename);
        category.appendChild(text);

        Element el = null;
        /*if this category is independent from other categories*/
        if (selectedCategory == null || selectedCategory.equals("None")) {
            //System.out.println("main menu");
            el = (Element) categories.item(0);
            /*append child under the main category*/
        } //it belongs under the selected catgegory
        else {
            //Element el;
            for (int i = 0; i < categories.getLength(); i++) {
                Element tmp = (Element) categories.item(i);
                if (tmp.getAttribute("name").equals(selectedCategory)) {
                    el = tmp;
                }
                //el.appendChild(category);
            }
        }
        /*write to the xml the info*/
        el.appendChild(category);
        try {
            Transformer tr = TransformerFactory.newInstance().newTransformer();
            tr.setOutputProperty(OutputKeys.INDENT, "yes");
            tr.transform(new DOMSource(configFile),
                    new StreamResult(new FileOutputStream(new File(xml))));

        } catch (TransformerException | FileNotFoundException e) {
            e.printStackTrace(System.err);
        }
        JOptionPane.showMessageDialog(this, "New category added successfully");
    }

    private void reWrite() {

    }


    private void folderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folderButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(System.getProperty("user.dir")));
        chooser.setDialogTitle("Select category folder");
        chooser.setAcceptAllFileFilterUsed(false);
        //chooser.addChoosableFileFilter(new FileNameExtensionFilter("Image Files", "png"));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            folder = chooser.getSelectedFile().getAbsolutePath();
            System.out.println(folder);
            //imageName = chooser.getSelectedFile().getName();
        } else {
            /*in case of cancel*/
            System.out.println("nothing to accept");
        }
    }//GEN-LAST:event_folderButtonActionPerformed

    private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageButtonActionPerformed
        if (folder != null) {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File(folder));
            chooser.setDialogTitle("Select category folder");
            chooser.setAcceptAllFileFilterUsed(true);
            chooser.addChoosableFileFilter(new FileNameExtensionFilter("Image Files", "png"));
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                imageName = chooser.getSelectedFile().getName();
                //System.out.println(imageName);
                ///imageName = chooser.getSelectedFile().getName();
            } else {
                /*in case of cancel*/
                System.out.println("nothing to accept");
            }
        } else {
            JOptionPane.showMessageDialog(this, "You did not choose a folder for your category");
        }
    }//GEN-LAST:event_imageButtonActionPerformed

    private void categoriesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoriesListValueChanged
        if (evt.getValueIsAdjusting()) {
            selectedCategory = (String) categoriesList.getSelectedValue();
            System.out.println(selectedCategory);
        }
    }//GEN-LAST:event_categoriesListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddCategoryScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddCategoryScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddCategoryScreen.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddCategoryScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList categoriesList;
    private javax.swing.JTextField categoryField;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JSpinner columnsSpinner;
    private javax.swing.JButton folderButton;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JButton imageButton;
    private javax.swing.JTextField imageField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JSpinner rowsSpinner;
    // End of variables declaration//GEN-END:variables
}
