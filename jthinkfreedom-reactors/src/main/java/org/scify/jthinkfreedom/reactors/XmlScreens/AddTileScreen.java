/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.scify.jthinkfreedom.reactors.XmlScreens;

import java.awt.Color;

import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.ListSelectionModel.SINGLE_SELECTION;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.scify.jthinkfreedom.reactors.Category;
import org.scify.jthinkfreedom.reactors.Parser;
import org.scify.jthinkfreedom.reactors.Tile;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author xrousakis
 */
public class AddTileScreen extends javax.swing.JFrame {

    DefaultListModel dlm;
    private boolean reWrite;
    private Document configFile;
    private Parser parser;
    private String existingImage;
    private String imageName;
    private String selectedCategory;
    private ArrayList<Category> categories;
    private String existingCategory;
    private Tile editingTile;
    private Category editingCategory;

    /**
     * Creates new form TileScreen
     */
    public AddTileScreen(String s, Tile t, Category category) {
        reWrite = true;
        dlm = new DefaultListModel();
        initComponents();

        categoryList.setSelectionMode(SINGLE_SELECTION);
        init();
        //existingCategory = s;
        editingCategory = category;
        editingTile = t;
        selectedCategory = s;//existingCategory.getName();
        imageName = t.getFileName();
        fillInfo();
    }

    public AddTileScreen() {
        reWrite = false;
        dlm = new DefaultListModel();
        initComponents();

        categoryList.setSelectionMode(SINGLE_SELECTION);
        init();
    }

    private void init() {
        parser = new Parser();
        configFile = parser.getConfigFile();
        categories = parser.getCategories();
        fillDlm();
    }

    public void fillDlm() {
        dlm.clear();
        ArrayList<String> categoryNames = parser.getCategoryNames();
        for (String s : categoryNames) {
            dlm.addElement(s);
        }

    }

    private void fillInfo() {
        categoryList.setSelectedValue(selectedCategory, true);
        jTextField1.setText(editingTile.getTxt());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        imageButton = new javax.swing.JButton();
        txtLabel = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        categoryLabel = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        textField = new javax.swing.JScrollPane();
        categoryList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 20)); // NOI18N
        jLabel1.setText("Add Image");

        imageLabel.setText("Select image:");

        imageButton.setText("Choose image");
        imageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageButtonActionPerformed(evt);
            }
        });

        txtLabel.setText("Give image text:");

        categoryLabel.setText("Select  Category");

        submitButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        submitButton.setText("Add");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        categoryList.setModel(dlm);
        categoryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                categoryListValueChanged(evt);
            }
        });
        textField.setViewportView(categoryList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel)
                    .addComponent(txtLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addComponent(categoryLabel)
                                .addContainerGap(53, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {imageButton, jTextField1});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, submitButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(imageLabel)
                            .addComponent(imageButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtLabel)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(submitButton)
                            .addComponent(cancelButton))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(categoryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(79, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*Show the folder of the the category selected from the list*/
    private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageButtonActionPerformed
        Border border = BorderFactory.createLineBorder(Color.RED, 2);
        if (selectedCategory == null) {
            categoryList.setBorder(border);
            return;
        }
        imageName = "";
        JFileChooser chooser = new JFileChooser();

        chooser.setCurrentDirectory(new java.io.File(chosenCategory().getFolder()));
        chooser.setDialogTitle("Select Picture");
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.addChoosableFileFilter(new FileNameExtensionFilter("Image Files", "png"));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            if (reWrite == true) {
                if (!chooser.getSelectedFile().getAbsoluteFile().equals(editingCategory.getFolder())) {
                    JOptionPane.showMessageDialog(this, "You cant choose image from a different folder from the one of the category");
                    imageName = editingTile.getFileName();
                    //imageName = chooser.getSelectedFile().getName();
                } else {
                    imageName = chooser.getSelectedFile().getName();
                }
            } else {
                imageName =chooser.getSelectedFile().getName(); ;
            }
        }else{
            System.out.println("nothing to accept");
        }
        if (chosenCategory().tileExists(imageName)) {
            JOptionPane.showMessageDialog(this, "This image is already being used try again");
            imageName = null;
        }

    }//GEN-LAST:event_imageButtonActionPerformed

    private Category chosenCategory() {
        int value = dlm.indexOf(selectedCategory);
        return categories.get(value + 1);
    }

    private void categoryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_categoryListValueChanged
        /*if we edit a tile we must keep the category final OK?*/
        if (reWrite == false) {
            selectedCategory = (String) categoryList.getSelectedValue();
            if (categoryList.getBorder() != null) {
                categoryList.setBorder(null);
            }
        } else {
            categoryList.setSelectedValue(selectedCategory, true);
        }

        //System.out.println(selectedCategory);
    }//GEN-LAST:event_categoryListValueChanged

    private Border createBorder(Color color) {
        Border border = BorderFactory.createLineBorder(color, 2);
        return border;
    }

    /*Takes the  information from the components and inserts them into the xml*/
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        Border border = BorderFactory.createLineBorder(Color.RED, 2);
        String text = jTextField1.getText();
        if (imageName == null && text.equals("")) {
            JOptionPane.showMessageDialog(this, "At least one of text or image must have a value");
        } else {
            if (text != null && selectedCategory == null) {
                categoryList.setBorder(border);
            } else {
                categoryList.setBorder(null);
                if (reWrite == false) {
                    if (imageName == null) {
                        imageName = "";
                    }
                    addToXml(text);
                } else {
                    reWriteToXml();
                }
            }
        }
    }//GEN-LAST:event_submitButtonActionPerformed


    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        /* Dispose current frame */
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void reWriteToXml() {
        //System.out.println(imageName + " " + jTextField1.getText());
        //System.out.println(existingTile.getFileName());
        /*pass the tile changes to the xml*/
        NodeList categoriesList = configFile.getElementsByTagName("category");
        /*for all categories*/
        for (int i = 0; i < categoriesList.getLength(); i++) {
            Element el = (Element) categoriesList.item(i);
            /*if this is the category i want*/
            if (el.getAttribute("name").equals(selectedCategory.trim())) {
                NodeList children = el.getChildNodes();
                for (int j = 0; j < children.getLength(); j++) {
                    /*if we find child node*/
                    if (children.item(j).getNodeType() == Node.ELEMENT_NODE) {
                        Element tile = (Element) children.item(j);
                        Element newElement = null;
                        /*if it is resource and the filename has changed then were fucked cause its not a resource anymore so changed it to a tile*/
                        if ((tile.getNodeName().equals("resource") && !editingTile.getFileName().equals(imageName)) || tile.getNodeName().equals("tile")) {
                            //el.removeChild(tile);
                            newElement = createTile(imageName, jTextField1.getText(), "tile");
                            el.removeChild(tile);
                            store(el, newElement);
                            return;
                            /*else if we have a resource and the file hasn chagnes so its still refers to a resource*/
                        } else if (tile.getNodeName().equals("resource")) {
                            //el.removeChild(tile);
                            newElement = createTile(imageName, jTextField1.getText(), "resource");
                            el.removeChild(tile);
                            store(el, newElement);
                            return;
                        }
                    }
                }
            }
        }
    }

    private void store(Element father, Element children) {
        father.appendChild(children);
        parser.finalizeXmlChanges();
        JOptionPane.showMessageDialog(this, "Image information was modified succesfully");
    }

    private Element createTile(String nameOfImage, String txt, String type) {
        /*creating tags to store */
        Element tile = configFile.createElement(type);
        Element filename = configFile.createElement("filename");
        Element text = configFile.createElement("text");
        filename.appendChild(configFile.createTextNode(nameOfImage));
        /* appending tags */

        text.appendChild(configFile.createTextNode(txt));
        tile.appendChild(filename);
        tile.appendChild(text);

        return tile;

    }

    /*Saves the information into the xml*/
    private void addToXml(String txt) {
        NodeList categoriesList = configFile.getElementsByTagName("category");
        for (int i = 0; i < categoriesList.getLength(); i++) {
            Element el = (Element) categoriesList.item(i);
            if (el.getAttribute("name").equals(selectedCategory.trim())) {
                categoriesList.item(i).appendChild(createTile(imageName, txt, "tile"));
                parser.finalizeXmlChanges();
                JOptionPane.showMessageDialog(this, "New image added successfully");
            }
        }
        configFile.normalize();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddTileScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddTileScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddTileScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddTileScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddTileScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JList categoryList;
    private javax.swing.JButton imageButton;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton submitButton;
    private javax.swing.JScrollPane textField;
    private javax.swing.JLabel txtLabel;
    // End of variables declaration//GEN-END:variables
}
