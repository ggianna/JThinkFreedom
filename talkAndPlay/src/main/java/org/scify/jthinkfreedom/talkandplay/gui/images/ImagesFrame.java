package org.scify.jthinkfreedom.talkandplay.gui.images;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.scify.jthinkfreedom.talkandplay.gui.helpers.GuiHelper;
import org.scify.jthinkfreedom.talkandplay.models.Category;
import org.scify.jthinkfreedom.talkandplay.models.User;

/**
 *
 * @author christina
 */
public class ImagesFrame extends javax.swing.JFrame {

    private User user;
    private GuiHelper guiHelper;

    protected ArrayList<JPanel> paneList;

    protected final int BORDER_SIZE = 5;
    protected final int IMAGE_PADDING = 10;

    /**
     * Creates new form ImagesFrame
     */
    public ImagesFrame() {
        initComponents();
    }

    public ImagesFrame(User user) throws IOException {
        this.user = user;
        this.guiHelper = guiHelper;
        this.paneList = new ArrayList<>();
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagesPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout imagesPanelLayout = new javax.swing.GroupLayout(imagesPanel);
        imagesPanel.setLayout(imagesPanelLayout);
        imagesPanelLayout.setHorizontalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 992, Short.MAX_VALUE)
        );
        imagesPanelLayout.setVerticalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 594, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imagesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imagesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() throws IOException {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        /* GridLayout gridLayout = new GridLayout(user.getCategories().get(0).getRows(), user.getCategories().get(0).getColumns(), IMAGE_PADDING, IMAGE_PADDING);
         imagesPanel.setLayout(gridLayout);

         for (Category category : user.getCategories()) {

         JPanel imagePanel = createCategoryItem(category);
         imagesPanel.add(imagePanel);
         }*/
        drawImages(user.getCategories().get(0));
    }

    private void drawImages(Category parentCategory) throws IOException {
        imagesPanel.removeAll();

        GridLayout gridLayout = new GridLayout(parentCategory.getRows(), parentCategory.getColumns(), IMAGE_PADDING, IMAGE_PADDING);
        imagesPanel.setLayout(gridLayout);

        if (parentCategory.getParentCategory() == null) {
            JPanel imagePanel = createCategoryItem(parentCategory);
            imagesPanel.add(imagePanel);
        } else if (parentCategory.getSubCategories().size() > 0) {
            System.out.println("--------------- ");
            System.out.println("parent  " + parentCategory.getName());

            for (Category category : parentCategory.getSubCategories()) {
                System.out.println("child " + category.getName());
                JPanel imagePanel = createCategoryItem(category);
                imagesPanel.add(imagePanel);
            }
            imagesPanel.add(createBackItem(parentCategory));
        } else if (parentCategory.getImages().size() > 0) {
            /*
             for (Category category : parentCategory.getSubCategories()) {
             JPanel imagePanel = createCategoryItem(category);
             imagesPanel.add(imagePanel);
             }*/
        }
        imagesPanel.revalidate();
        imagesPanel.repaint();
    }

    private JPanel createCategoryItem(final Category category) throws IOException {
        JPanel panel = createImagePanel(category.getImage(), category.getName());
        paneList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    System.out.println("cat clicky");
                    try {
                        drawImages(category);
                    } catch (IOException ex) {
                        Logger.getLogger(ImagesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        return panel;
    }

    private JPanel createBackItem(final Category parentCategory) throws IOException {
        JPanel panel = createImagePanel("/home/christina/Desktop/talkandplay/back-arrow.png", "Πίσω");
        paneList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    System.out.println("back clicky");

                    try {
                        drawImages(parentCategory.getParentCategory());
                    } catch (IOException ex) {
                        Logger.getLogger(ImagesFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        return panel;
    }

    private JPanel createImagePanel(String imagePath, String text) throws IOException {
        JPanel panel = new JPanel(new BorderLayout());

        File pathToFile = new File(imagePath);
        java.awt.Image image = ImageIO.read(pathToFile);
        ImageIcon imageIcon = new ImageIcon(image.getScaledInstance(300, 300, java.awt.Image.SCALE_SMOOTH));

        JLabel imgLabel = new JLabel(imageIcon);
        JLabel txtLabel = new JLabel(text);
        txtLabel.setFont(new Font("Courier New", Font.PLAIN, 40));

        panel.setBackground(Color.LIGHT_GRAY);
        panel.add(imgLabel, BorderLayout.CENTER);
        panel.add(txtLabel, BorderLayout.NORTH);
        txtLabel.setHorizontalAlignment(JLabel.CENTER);

        return panel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagesPanel;
    // End of variables declaration//GEN-END:variables
}
