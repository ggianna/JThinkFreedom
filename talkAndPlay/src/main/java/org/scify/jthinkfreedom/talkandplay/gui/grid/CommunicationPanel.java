package org.scify.jthinkfreedom.talkandplay.gui.grid;

import java.awt.Color;
import java.awt.GridLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.scify.jthinkfreedom.talkandplay.gui.helpers.GuiHelper;
import org.scify.jthinkfreedom.talkandplay.models.Category;
import org.scify.jthinkfreedom.talkandplay.models.Tile;
import org.scify.jthinkfreedom.talkandplay.models.User;
import org.scify.jthinkfreedom.talkandplay.models.sensors.MouseSensor;
import org.scify.jthinkfreedom.talkandplay.models.sensors.Sensor;
import org.scify.jthinkfreedom.talkandplay.services.CategoryService;
import org.scify.jthinkfreedom.talkandplay.services.MediaPlayerService;
import org.scify.jthinkfreedom.talkandplay.services.SensorService;
import org.scify.jthinkfreedom.talkandplay.services.UserService;
import uk.co.caprica.vlcj.component.AudioMediaListPlayerComponent;
import uk.co.caprica.vlcj.component.AudioMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

public class CommunicationPanel extends javax.swing.JPanel {

    private User user;
    private Timer timer;
    private int selectedImage;
    private List<JPanel> panelList;
    private GridLayout gridLayout;
    private GridFrame parent;

    private CategoryService categoryService;
    private UserService userService;
    private SensorService sensorService;
    private MediaPlayerService mediaPlayerService;

    private AudioMediaPlayerComponent audioPlayer;
    private Category rootCategory;
    private Category currentCategory;
    private GuiHelper guiHelper;
    private int rows, columns, grid;
    private int stopped = 0;

    protected final int BORDER_SIZE = 5;
    protected final int IMAGE_PADDING = 10;

    public CommunicationPanel(String userName, GridFrame parent) throws IOException {
        this.categoryService = new CategoryService();
        this.userService = new UserService();
        this.mediaPlayerService = new MediaPlayerService();
        this.audioPlayer = new AudioMediaListPlayerComponent();
        this.user = userService.getUser(userName);
        this.sensorService = new SensorService(this.user);
        this.rootCategory = categoryService.getCategoriesWithRootParent(user);
        this.currentCategory = new Category();
        this.parent = parent;
        this.guiHelper = new GuiHelper();

        initComponents();
        initAudioPlayer();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagesPanel = new javax.swing.JPanel();

        javax.swing.GroupLayout imagesPanelLayout = new javax.swing.GroupLayout(imagesPanel);
        imagesPanel.setLayout(imagesPanelLayout);
        imagesPanelLayout.setHorizontalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );
        imagesPanelLayout.setVerticalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initAudioPlayer() {
        final CommunicationPanel currentPanel = this;
        audioPlayer.getMediaPlayer().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {
            @Override
            public void finished(MediaPlayer mediaPlayer) {
                currentPanel.showNextGrid(currentCategory);
            }
        });
    }

    private void initCustomComponents() throws IOException {
        gridLayout = new GridLayout();
        gridLayout.setHgap(IMAGE_PADDING);
        gridLayout.setVgap(IMAGE_PADDING);

        drawImages(rootCategory);
    }

    private void drawImages(Category category) throws IOException {
        selectedImage = 0;
        imagesPanel.removeAll();
        panelList = new ArrayList<>();
        int emptiesCount = 0;

        setGrid(category);

        if (category.getSubCategories().size() > 0) {
            //show only the num of images that fit the grid
            if (category.getSubCategories().size() >= grid) {
                int i;
                for (i = stopped; i < (grid + stopped - 2); i++) {
                    if (i > category.getSubCategories().size() - 1) {
                        emptiesCount++;
                    } else {
                        imagesPanel.add(createCategoryItem(category.getSubCategories().get(i)));
                    }
                }
                if (i <= category.getSubCategories().size() - 1) {
                    stopped = i;
                    imagesPanel.add(createMoreItem(category));
                } else {
                    stopped = 0;
                }
            } else {
                for (Category childCategory : category.getSubCategories()) {
                    imagesPanel.add(createCategoryItem(childCategory));
                }
            }
        } else if (category.getTiles().size() > 0) {
            //draw the tile images
        }

        //if parent is null, display the first menu
        if (emptiesCount == 0 && null == category.getParentCategory()) {
            imagesPanel.add(createBackItem(category, true));
        } else if (emptiesCount == 0 && null != category.getParentCategory()) {
            imagesPanel.add(createBackItem(category, false));
        }

        //check if there's empty space that should be filled with
        //mock JLabels in order to keep the grid size
        if (emptiesCount > 0) {
            imagesPanel.add(createLessItem(category));
            for (int i = 0; i < emptiesCount; i++) {
                imagesPanel.add(new JLabel());
            }
        }
        setTimer();

        imagesPanel.revalidate();
        imagesPanel.repaint();
        parent.add(imagesPanel);
        parent.revalidate();
        parent.repaint();
    }

    /**
     * Create the JPanel that holds a category
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createCategoryItem(final Category category) throws IOException {
        JPanel panel = guiHelper.createImagePanel(category.getImage(), category.getName(), parent);
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    timer.cancel();
                    currentCategory = category;
                    audioPlayer.getMediaPlayer().playMedia(category.getSound());
                }
            }
        });
        return panel;
    }

    /**
     * Create the JPanel that holds a tile
     *
     * @param tile
     * @return
     * @throws IOException
     */
    private JPanel createTileItem(final Tile tile) throws IOException {
        JPanel panel = guiHelper.createImagePanel(tile.getImage(), tile.getName(), parent);
        panelList.add(panel);
        imagesPanel.add(panel);
        final CommunicationPanel currentPanel = this;

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    JOptionPane.showMessageDialog(currentPanel,
                            "A sound is played",
                            "Meow",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        return panel;
    }

    /**
     * Create the JPanel that holds the back button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createBackItem(final Category category, final boolean isRoot) throws IOException {
        JPanel panel = guiHelper.createResourceImagePanel((new ImageIcon(getClass().getResource("/org/scify/jthinkfreedom/talkandplay/resources/back-icon.png"))), "Πίσω", parent);
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    timer.cancel();
                    System.out.println("stopped at "+stopped);
                    stopped = 0;
                    System.out.println("isRoot " + isRoot + " category " + category.getName() + " category.parent " + category.getParentCategory());
                    if (isRoot) {
                        parent.repaintMenu(imagesPanel);
                    } else if (!isRoot && category.getParentCategory() == null) {
                        try {
                            drawImages(rootCategory);
                        } catch (IOException ex) {
                            Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        try {
                            drawImages(category.getParentCategory());
                        } catch (IOException ex) {
                            Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        });
        return panel;
    }

    /**
     * Create the JPanel that holds the more button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createMoreItem(final Category category) throws IOException {
        JPanel panel = guiHelper.createResourceImagePanel((new ImageIcon(getClass().getResource("/org/scify/jthinkfreedom/talkandplay/resources/more-icon.png"))), "Περισσότερα", parent);
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    timer.cancel();
                    try {
                        drawImages(category);
                    } catch (IOException ex) {
                        Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        return panel;
    }

    /**
     * Create the JPanel that holds the less button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createLessItem(final Category category) throws IOException {
        JPanel panel = guiHelper.createResourceImagePanel((new ImageIcon(getClass().getResource("/org/scify/jthinkfreedom/talkandplay/resources/less-icon.png"))), "Λιγότερα", parent);
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    timer.cancel();
                    try {
                        drawImages(category);
                    } catch (IOException ex) {
                        Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        return panel;
    }

    private void showNextGrid(Category category) {
        try {
            drawImages(category);
        } catch (IOException ex) {
            Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Set the grid dimensions. Rows is always set to 0, because if rows>0, the
     * columns are ignored
     *
     * @param category
     */
    private void setGrid(Category category) {
        if (category != null) {
            rows = category.getRows();
            columns = category.getColumns();
            grid = rows * columns;
        } else {
            rows = user.getConfiguration().getDefaultGridRow();
            columns = user.getConfiguration().getDefaultGridColumn();
            grid = rows * columns;
        }
        gridLayout.setColumns(columns);
        gridLayout.setRows(0);
        imagesPanel.setLayout(gridLayout);
    }

    private void setTimer() {
        timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                if (selectedImage == 0) {
                    panelList.get(panelList.size() - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                } else if (selectedImage == panelList.size() - 1) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage = 0;
                } else if (selectedImage < panelList.size() - 1 && selectedImage > 0) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                }
            }
        }, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagesPanel;
    // End of variables declaration//GEN-END:variables

}
