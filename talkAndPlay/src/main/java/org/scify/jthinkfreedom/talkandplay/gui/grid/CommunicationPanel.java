package org.scify.jthinkfreedom.talkandplay.gui.grid;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.scify.jthinkfreedom.talkandplay.models.Category;
import org.scify.jthinkfreedom.talkandplay.models.Tile;
import org.scify.jthinkfreedom.talkandplay.models.User;
import org.scify.jthinkfreedom.talkandplay.models.sensors.MouseSensor;
import org.scify.jthinkfreedom.talkandplay.models.sensors.Sensor;
import org.scify.jthinkfreedom.talkandplay.services.CategoryService;
import org.scify.jthinkfreedom.talkandplay.services.SensorService;
import org.scify.jthinkfreedom.talkandplay.services.UserService;

public class CommunicationPanel extends javax.swing.JPanel{

    private User user;
    private Timer timer;
    private int selectedImage;
    private List<JPanel> panelList;
    private int moreImages;
    private GridLayout gridLayout;
    private GridFrame parent;
    private CategoryService categoryService;
    private UserService userService;
    private SensorService sensorService;
    private List<Category> categories;

    protected final int BORDER_SIZE = 5;
    protected final int IMAGE_PADDING = 10;

    public CommunicationPanel(String userName, GridFrame parent) throws IOException {
        this.categoryService = new CategoryService();
        this.userService = new UserService();
        this.user = userService.getUser(userName);
        this.sensorService = new SensorService(this.user);
        this.categories = categoryService.getCategories(userName);
        this.timer = new Timer();
        this.parent = parent;
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        imagesPanel = new javax.swing.JPanel();

        javax.swing.GroupLayout imagesPanelLayout = new javax.swing.GroupLayout(imagesPanel);
        imagesPanel.setLayout(imagesPanelLayout);
        imagesPanelLayout.setHorizontalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 535, Short.MAX_VALUE)
        );
        imagesPanelLayout.setVerticalGroup(
            imagesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imagesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() throws IOException {
        gridLayout = new GridLayout();
        gridLayout.setHgap(IMAGE_PADDING);
        gridLayout.setVgap(IMAGE_PADDING);

        for (Category category : categories) {
            if (category.getName().equals(user.getCommunicationModule().getName())) {
                drawImages(category);
                break;
            }
        }

        // drawImages(user.getCommunicationModule().getCategories(), null);
        //setTimer();
        //check if timer closes
    }

    private void drawImages(Category category) throws IOException {
        imagesPanel.removeAll();
        panelList = new ArrayList<>();
        int rows, columns, grid;

        if (category != null) {
            rows = category.getRows();
            columns = category.getColumns();
            grid = rows * columns;
        } else {
            rows = user.getConfiguration().getDefaultGridRow();
            columns = user.getConfiguration().getDefaultGridColumn();
            grid = rows * columns;
        }

        //if there are more images than the grid size, 
        //add another row to display the more and back icons
        if ((categories.size() - 1) > grid) {
            gridLayout.setRows(rows + 1);
        } else {
            gridLayout.setRows(rows);
        }

        gridLayout.setRows(rows);
        gridLayout.setColumns(columns);
        imagesPanel.setLayout(gridLayout);

        if (category == null) {
            //draw main menu?
        } else {

            if (category.getSubCategories().size() > 0) {

                for (Category childCategory : category.getSubCategories()) {
                    System.out.println("category " + childCategory.getName());
                    imagesPanel.add(createCategoryItem(childCategory));
                }

            } else if (category.getTiles().size() > 0) {
                //draw the tile images

            }
        }

        imagesPanel.add(createBackItem(category));
        imagesPanel.revalidate();
        imagesPanel.repaint();
        selectedImage = 0;
    }

    /**
     * Draw the sub categories or images for the current selectedImage category
     *
     * @param category
     * @param isRootPanel
     * @throws IOException
     */
    private void drawImages(List<Category> categories, Category parent) throws IOException {
        imagesPanel.removeAll();
        panelList = new ArrayList<>();
        int rows, columns, grid;

        if (parent != null) {
            rows = parent.getRows();
            columns = parent.getColumns();
            grid = rows * columns;
        } else {
            rows = user.getConfiguration().getDefaultGridRow();
            columns = user.getConfiguration().getDefaultGridColumn();
            grid = rows * columns;
        }

        System.out.println("Grid " + rows + "x" + columns);

        //if there are more images than the grid size, 
        //add another row to display the more and back icons
        if ((categories.size() - 1) > grid) {
            gridLayout.setRows(rows + 1);
        } else {
            gridLayout.setRows(rows);
        }

        gridLayout.setRows(rows);
        gridLayout.setColumns(columns);
        imagesPanel.setLayout(gridLayout);

        for (int i = moreImages; i < categories.size(); i++) {

            if (categories.get(i).getParentCategory() != null) {
                System.out.println("Cat " + categories.get(i).getName() + " parent " + categories.get(i).getParentCategory().getName());
            }

            //display the more button
            if (parent != null
                    && moreImages == 0
                    && i >= (parent.getRows() * parent.getColumns())) {
                moreImages = i;
                imagesPanel.add(createMoreItem(categories.get(i)));

                break;
            } else {
                JPanel imagePanel = createCategoryItem(categories.get(i));
                imagesPanel.add(imagePanel);
            }

            if (moreImages > 0) {
                moreImages = 0;
                imagesPanel.add(createLessItem(categories.get(i)));
            }
        }

        imagesPanel.add(createBackItem(parent));
        imagesPanel.revalidate();
        imagesPanel.repaint();
        selectedImage = 0;
    }

    /**
     * Create the JPanel that holds a category
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createCategoryItem(final Category category) throws IOException {
        JPanel panel = createImagePanel(category.getImage(), category.getName());
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {

                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");

                if (sensorService.shouldSelect(sensor)) {
                    try {
                        drawImages(category);
                    } catch (IOException ex) {
                        Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    System.out.println("do nth");
                }

            }
        });
        return panel;
    }
    
  

    /**
     * Create the JPanel that holds a tile
     *
     * @param tile
     * @return
     * @throws IOException
     */
    private JPanel createTileItem(final Tile tile) throws IOException {
        JPanel panel = createImagePanel(tile.getImage(), tile.getName());
        panelList.add(panel);
        imagesPanel.add(panel);
        final CommunicationPanel currentPanel = this;

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    JOptionPane.showMessageDialog(currentPanel,
                            "A sound is played",
                            "Meow",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        return panel;
    }

    /**
     * Create the JPanel that holds the back button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createBackItem(final Category category) throws IOException {
        JPanel panel = createImagePanel("/home/christina/Desktop/talkandplay/back-arrow.png", "Πίσω");
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    try {
                        drawImages(category);
                    } catch (IOException ex) {
                        Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }
        });
        return panel;
    }

    /**
     * Create the JPanel that holds the more button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createMoreItem(final Category category) throws IOException {
        JPanel panel = createImagePanel("/home/christina/Desktop/talkandplay/more.png", "Περισσότερα");
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    try {
                        drawImages(category.getSubCategories(), category.getParentCategory());
                    } catch (IOException ex) {
                        Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        return panel;
    }

    /**
     * Create the JPanel that holds the less button
     *
     * @param category
     * @return
     * @throws IOException
     */
    private JPanel createLessItem(final Category category) throws IOException {
        JPanel panel = createImagePanel("/home/christina/Desktop/talkandplay/less.png", "Λιγότερα");
        panelList.add(panel);
        imagesPanel.add(panel);

        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    try {
                        drawImages(category.getSubCategories(), category.getParentCategory());
                    } catch (IOException ex) {
                        Logger.getLogger(CommunicationPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
        return panel;
    }

    /**
     * Create an image with its label
     *
     * @param imagePath
     * @param text
     * @return
     * @throws IOException
     */
    private JPanel createImagePanel(String imagePath, String text) {
        JPanel panel = new JPanel(new BorderLayout());

        java.awt.Image image;
        try {
            image = ImageIO.read(new File(imagePath));
            ImageIcon imageIcon = new ImageIcon(image.getScaledInstance(300, 300, java.awt.Image.SCALE_SMOOTH));

            JLabel imgLabel = new JLabel(imageIcon);
            JLabel txtLabel = new JLabel(text);
            txtLabel.setFont(new Font("Courier New", Font.PLAIN, 40));

            panel.setBackground(Color.LIGHT_GRAY);
            panel.add(imgLabel, BorderLayout.CENTER);
            panel.add(txtLabel, BorderLayout.NORTH);
            txtLabel.setHorizontalAlignment(JLabel.CENTER);

            return panel;
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Η εικόνα της καρτέλας " + text + " δεν βρέθηκε",
                    "Σφάλμα",
                    JOptionPane.ERROR_MESSAGE);
            return panel;

        }

    }

    private void setTimer() {
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                // System.out.println("selectedImage " + selectedImage + " size " + panelList.size());

                if (selectedImage == 0) {
                    panelList.get(panelList.size() - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                } else if (selectedImage == panelList.size() - 1) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage = 0;
                } else if (selectedImage < panelList.size() - 1 && selectedImage > 0) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                }
            }
        }, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagesPanel;
    // End of variables declaration//GEN-END:variables



}
