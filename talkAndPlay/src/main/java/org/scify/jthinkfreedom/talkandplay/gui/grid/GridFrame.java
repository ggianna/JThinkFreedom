package org.scify.jthinkfreedom.talkandplay.gui.grid;

import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.scify.jthinkfreedom.talkandplay.gui.helpers.GuiHelper;
import org.scify.jthinkfreedom.talkandplay.models.User;
import org.scify.jthinkfreedom.talkandplay.models.sensors.KeyboardSensor;
import org.scify.jthinkfreedom.talkandplay.models.sensors.MouseSensor;
import org.scify.jthinkfreedom.talkandplay.models.sensors.Sensor;
import org.scify.jthinkfreedom.talkandplay.services.MediaPlayerService;
import org.scify.jthinkfreedom.talkandplay.services.SensorService;
import org.scify.jthinkfreedom.talkandplay.services.UserService;
import uk.co.caprica.vlcj.component.AudioMediaListPlayerComponent;
import uk.co.caprica.vlcj.component.AudioMediaPlayerComponent;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

public class GridFrame extends javax.swing.JFrame {

    private User user;
    private GuiHelper guiHelper;
    private UserService userService;
    private SensorService sensorService;
    private MediaPlayerService mediaPlayerService;
    private AudioMediaPlayerComponent audioPlayer;
    private Timer timer;
    private int selectedImage;
    private ArrayList<JPanel> panelList;
    private JPanel communicationPanel;
    private JPanel entertainmentPanel;
    private JPanel gamesPanel;

    protected final int BORDER_SIZE = 5;
    protected final int IMAGE_PADDING = 10;

    /**
     * Creates new form ImagesFrame
     */
    public GridFrame() {
        initComponents();
    }

    public GridFrame(String userName) throws IOException {
        this.userService = new UserService();
        this.user = userService.getUser(userName);
        this.sensorService = new SensorService(user);
        this.mediaPlayerService = new MediaPlayerService();
        this.audioPlayer = new AudioMediaListPlayerComponent();
        this.guiHelper = new GuiHelper();
        this.guiHelper = guiHelper;
        this.panelList = new ArrayList<>();
        initComponents();
        initAudioPlayer();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gridPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        gridPanel.setBackground(new java.awt.Color(255, 255, 255));
        gridPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        gridPanel.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout gridPanelLayout = new javax.swing.GroupLayout(gridPanel);
        gridPanel.setLayout(gridPanelLayout);
        gridPanelLayout.setHorizontalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        gridPanelLayout.setVerticalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );

        getContentPane().add(gridPanel, java.awt.BorderLayout.CENTER);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/scify/jthinkfreedom/talkandplay/resources/tp_logo_small.png"))); // NOI18N
        jLabel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 1));
        getContentPane().add(jLabel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initAudioPlayer() {
        final GridFrame currentFrame = this;
        audioPlayer.getMediaPlayer().addMediaPlayerEventListener(new MediaPlayerEventAdapter() {
            @Override
            public void finished(MediaPlayer mediaPlayer) {
                currentFrame.showNextGrid();
            }
        });
    }

    private void initCustomComponents() {
        repaintMenu(gridPanel);
        setKeyboardListeners();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pack();
    }

    public void repaintMenu(JPanel panel) {
        GridLayout gridLayout = new GridLayout(1, 3, IMAGE_PADDING, IMAGE_PADDING);
        gridPanel.setLayout(gridLayout);
        gridPanel.removeAll();

        if (user.getCommunicationModule().isEnabled()) {
            communicationPanel = guiHelper.createImagePanel(user.getCommunicationModule().getImage(), user.getCommunicationModule().getName(), this);
            gridPanel.add(communicationPanel);
            panelList.add(communicationPanel);
        }

        if (user.getEntertainmentModule().isEnabled()) {
            entertainmentPanel = guiHelper.createImagePanel(user.getEntertainmentModule().getImage(), user.getEntertainmentModule().getName(), this);
            gridPanel.add(entertainmentPanel);
            panelList.add(entertainmentPanel);
        }

        if (user.getGameModule().isEnabled()) {
            gamesPanel = guiHelper.createImagePanel(user.getGameModule().getImage(), user.getGameModule().getName(), this);
            gridPanel.add(gamesPanel);
            panelList.add(gamesPanel);
        }

        setTimer();

        gridPanel.revalidate();
        gridPanel.repaint();
        remove(panel);
        add(gridPanel);
        revalidate();
        repaint();
        pack();
        setMouseListeners();
    }

    private void setTimer() {
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {

                if (selectedImage == 0) {
                    panelList.get(panelList.size() - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                } else if (selectedImage == panelList.size() - 1) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage = 0;
                } else if (selectedImage < panelList.size() - 1 && selectedImage > 0) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                }
            }
        }, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);
    }

    /**
     * The keyboard listeners for the whole JFrame
     */
    private void setKeyboardListeners() {
        setFocusable(true);
        final GridFrame gridFrame = this;

        addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent evt) {
                Sensor sensor = new KeyboardSensor(evt.getKeyCode(), evt.getKeyChar(), "keyboard");
                if (sensorService.shouldSelect(sensor)) {
                    //ugly, fix
                    if (selectedImage == 0) {
                        timer.cancel();
                        getContentPane().remove(gridPanel);
                        try {
                            getContentPane().add(new CommunicationPanel(user.getName(), gridFrame));
                        } catch (IOException ex) {
                            Logger.getLogger(GridFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else if (selectedImage == 1 || selectedImage == 2) {
                        JOptionPane.showMessageDialog(gridFrame,
                                "Υπό κατασκευή",
                                "",
                                JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        });
    }

    /**
     * The mouse listeners for each of the three modules
     */
    private void setMouseListeners() {
        final GridFrame gridFrame = this;

        //launch the communication grid        
        communicationPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    audioPlayer.getMediaPlayer().playMedia(user.getCommunicationModule().getSound());
                    //mediaPlayerService.playSound(user.getCommunicationModule().getSound());
                }
            }
        });

        //launch the entertainment grid        
        entertainmentPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    mediaPlayerService.playSound(user.getEntertainmentModule().getSound());
                    JOptionPane.showMessageDialog(gridFrame,
                            "Υπό κατασκευή",
                            "",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        //launch the games grid        
        gamesPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Sensor sensor = new MouseSensor(evt.getButton(), evt.getClickCount(), "mouse");
                if (sensorService.shouldSelect(sensor)) {
                    mediaPlayerService.playSound(user.getGameModule().getSound());
                    JOptionPane.showMessageDialog(gridFrame,
                            "Υπό κατασκευή",
                            "",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
    }

    private void showNextGrid() {
        timer.cancel();
        remove(gridPanel);
        try {
            CommunicationPanel communicationPanel = new CommunicationPanel(user.getName(), this);
        } catch (IOException ex) {
            Logger.getLogger(GridFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gridPanel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

}
