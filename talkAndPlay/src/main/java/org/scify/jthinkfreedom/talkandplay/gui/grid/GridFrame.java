package org.scify.jthinkfreedom.talkandplay.gui.grid;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Timer;
import java.util.TimerTask;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.scify.jthinkfreedom.talkandplay.gui.helpers.GuiHelper;
import org.scify.jthinkfreedom.talkandplay.models.User;
import org.scify.jthinkfreedom.talkandplay.services.UserService;

/**
 *
 * @author christina
 */
public class GridFrame extends javax.swing.JFrame {

    private User user;
    private GuiHelper guiHelper;
    private UserService userService;
    private Timer timer;
    private int selectedImage;
    private ArrayList<JPanel> panelList;

    protected final int BORDER_SIZE = 5;
    protected final int IMAGE_PADDING = 10;

    /**
     * Creates new form ImagesFrame
     */
    public GridFrame() {
        initComponents();
    }

    public GridFrame(String userName) throws IOException {
        this.userService = new UserService();
        this.user = userService.getUser(userName);
        this.guiHelper = new GuiHelper();
        this.guiHelper = guiHelper;
        this.panelList = new ArrayList<>();
        this.timer = new Timer();
        initComponents();
        initCustomComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gridPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        gridPanel.setBackground(new java.awt.Color(255, 255, 255));
        gridPanel.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout gridPanelLayout = new javax.swing.GroupLayout(gridPanel);
        gridPanel.setLayout(gridPanelLayout);
        gridPanelLayout.setHorizontalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        gridPanelLayout.setVerticalGroup(
            gridPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/scify/jthinkfreedom/talkandplay/resources/tp_logo_small.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gridPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 984, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(53, 53, 53)
                .addComponent(gridPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initCustomComponents() {
        GridLayout gridLayout = new GridLayout(1, 3, IMAGE_PADDING, IMAGE_PADDING);
        gridPanel.setLayout(gridLayout);

        JPanel commImg = guiHelper.createImagePanel(user.getCommunicationModule().getImage(), user.getCommunicationModule().getName(), this);
        JPanel entImg = guiHelper.createImagePanel(user.getEntertainmentModule().getImage(), user.getEntertainmentModule().getName(), this);
        JPanel gameImg = guiHelper.createImagePanel(user.getGameModule().getImage(), user.getGameModule().getName(), this);

        gridPanel.add(commImg);
        gridPanel.add(entImg);
        gridPanel.add(gameImg);

        panelList.add(commImg);
        panelList.add(entImg);
        panelList.add(gameImg);

        setTimer();
        
        gridPanel.revalidate();
        gridPanel.repaint();

    }

    private void setTimer() {
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {

                if (selectedImage == 0) {
                    panelList.get(panelList.size() - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                } else if (selectedImage == panelList.size() - 1) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage = 0;
                } else if (selectedImage < panelList.size() - 1 && selectedImage > 0) {
                    panelList.get(selectedImage - 1).setBorder(null);
                    panelList.get(selectedImage).setBorder(BorderFactory.createLineBorder(Color.BLUE, BORDER_SIZE));
                    selectedImage++;
                }
            }
        }, user.getConfiguration().getRotationSpeed() * 1000, user.getConfiguration().getRotationSpeed() * 1000);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel gridPanel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
